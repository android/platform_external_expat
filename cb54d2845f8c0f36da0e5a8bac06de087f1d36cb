{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cbaeee00_70689ec5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2021-01-25T20:17:04Z",
      "side": 1,
      "message": "PTAL",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40365b9a_6bc6bdcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-26T01:33:47Z",
      "side": 1,
      "message": "(sorry, didn\u0027t see this first. i did read^Wskim your doc but didn\u0027t see the long term plan there.)\n\nif this is the plan, just skip the comment?\n\nsince i\u0027m unable to guess... is there a reason why we don\u0027t just go straight to hiding the bad files? (i.e. why is this an independently useful step?)",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f8edc34_c8a1556c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2021-01-26T02:36:00Z",
      "side": 1,
      "message": "If a code owner says \"Stop! Let me manually tweak this change that your shell and awk script created\", I am happy to wait a day or two while they do that and then review what they\u0027ve done.\n\nBut I will have 1600 or so of these changes affecting thousands of build files that I will need to get merged in the next week or two.\n\nFor the vast bulk of them, they are what they are. They will get merged in bulk using global approval. I cannot afford to wait weeks while perfecting a script that somehow automagically identifies the unused stuff and uses visibility to assert they are unused.\n\nThe \"apply every found license to every target\" approach is \"safe\" from Google\u0027s perspective in that it makes sure our future tooling knows about the most restrictive license -- even it if the build system applies it too broadly.",
      "parentUuid": "40365b9a_6bc6bdcc",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d004ffee_476e1269",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-26T18:53:33Z",
      "side": 1,
      "message": "yeah, the \"most restrictive license -- even ... if the build system applies it too broadly\" bit was what i\u0027ve been worried about the most, but it seems like i should just ignore all this for now and start worrying again when we actually get to where the build system understands which files are which. (but the fact that you\u0027re thinking that far ahead and understand the problem is comforting in the meantime!)",
      "parentUuid": "7f8edc34_c8a1556c",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4b6728_b1a1f93f",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-25T23:36:16Z",
      "side": 1,
      "message": "no-one adding a dependency will read this file. they\u0027ll read Android.bp instead...",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7019e233_d335e145",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2021-01-26T00:28:53Z",
      "side": 1,
      "message": "Hmmm... I will add it to the lsc script so it appears in the Android.bp too.",
      "parentUuid": "0f4b6728_b1a1f93f",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea453387_ba6d0ea7",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-25T23:36:16Z",
      "side": 1,
      "message": "...but this is a man page. does that actually matter in practice? nothing in Android.bp refers to that, so it doesn\u0027t get redistributed.\n\nwhich is lucky, because expat is pretty widely available, with no visibility restrictions (so *any* code can silently add a dependency):\n```\ncc_library {\n    name: \"libexpat\",\n    vendor_available: true,\n    product_available: true,\n    vndk: {\n        enabled: true,\n    },\n    double_loadable: true,\n    host_supported: true,\n    unique_host_soname: true,\n    sdk_version: \"9\",\n...\n```",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11ba7f77_032fe1e6",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2021-01-26T00:28:53Z",
      "side": 1,
      "message": "Think of this as step-2 in a multi-step journey.\n\nAfter the LSC goes in, it would be possible to \"hide\" the man page using visibility and then put the METADATA back to NOTICE.",
      "parentUuid": "ea453387_ba6d0ea7",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "657a3fa4_283c7429",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-26T01:33:47Z",
      "side": 1,
      "message": "oh, yeah, if that\u0027s actually work in progress, that sounds genuinely useful. nice!",
      "parentUuid": "11ba7f77_032fe1e6",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "118d94c9_5e701eec",
        "filename": "METADATA",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2021-01-26T02:22:54Z",
      "side": 1,
      "message": "The steps I will be pursuing are:\n\n2. Add licenses to everything via LSC.\n\n3. Add license_metadata to non-module make targets.\n\n4. Generate notice files for the ui using license metadata from make. (Has side-effect of making it a build error if any non-module target depended on doesn\u0027t have license metadata).\n\n5. Potentially change the UI to use a new notice file format.\n\n6. Add assertions like \"no non-aggregating target has both restricted and proprietary conditions\".\n\n7. Delete all the old notice file logic.\n\n8. Change the source-tarball build rule to use the new license metadata built by make.\n\n9. Delete all the MODULE_LICENSE_* files.\n\nI really, really need to get everything up to and including step 5 done for release S.\n\n\nSteps the bazel folks will be pursuing in parallel are:\n\na. convert all the Soong blueprints to bazel BUILD files.\n\nb. do steps 4 and 6 except using bazel\n\nDepending on their progress, at some point, I will abandon the work on make and Soong to use bazel instead for the remaining same steps listed above.\n\n\nA big step the compliance folks will be pursuing is:\n\nReduce the need for listing the license_kinds in bazel license rules by calculating most of them from the license_text files.\n\n\nEveryone else:\n\nBetween steps 2 and 3 (and ongoing), project owners can tune the license and license_kind modules in their Android.bp files (and makefiles) if they want to:\n\nSplit license generated by the LSC with every license_kind into multiple license modules with subsets of those license kinds.\n\nDelete license kinds from parent Android.bp files where that kind is entirely covered within a child Android.bp file that has its own LICENSE file.\n\nCreate their own license_kind modules. e.g. for proprietary code.\n\nRemove or change the \":__subpackages__\" visibility.\n\nTune the list of license_text files from the kitchen-sink approach the LSC will take.\n\nIf some enterprising person wanted to create a soong module/bazel rule that creates a license_text by scanning every source file for copyright notices, they could do that. I have no plan to, but if someone were really fervent in their belief that it\u0027s the correct way to do notice files, that person could do it. The license_text property can refer to output of a rule just as easily as to a file by using \":modulename\" in Soong or \":rulename\" in bazel.\n\n\nAs a head-start, I will probably write some scripts after step 2 to identify targets that will fail the \"do not combine restricted with proprietary\" rule, and proactively bring those to the attention of the code owners so they can tune their blueprints.\n\n\nNot all of that is covered in the LSC docs. The above is sort of the current state of a somewhat fluid roadmap.",
      "parentUuid": "657a3fa4_283c7429",
      "revId": "cb54d2845f8c0f36da0e5a8bac06de087f1d36cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}